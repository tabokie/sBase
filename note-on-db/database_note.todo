<http://blog.csdn.net/heiyeshuwu/article/details/9722443>
<https://zhuanlan.zhihu.com/p/32900004>
MongoDB
FastDB
BerkeleyDB

File IO:
	☐	Random Access: Memory Map, slower than readFile
	☐	Sequential Access: Logically, not physically. By means of plain ReadFile ?


Basic Operationi Support:
	☐	Insert, Find
	☐	Update index
	☐	Relational math

Fractal Tree:
	Overview:
		☐	flush from root to node; record in nodes are sorted
	Implementation:
		(TokuMX)
		<https://www.percona.com/blog/2013/07/02/tokumx-fractal-treer-indexes-what-are-they/>
		<http://mysql.taobao.org/monthly/2016/04/09/>

LSM:
	Implementation:
		(LevelDB)
		<https://www.zhihu.com/question/19887265?sort=created>
		<https://yq.aliyun.com/articles/64357>
		<http://blog.csdn.net/linuxheik/article/details/52768223>
		<http://blog.jobbole.com/111792/>
		(Bigtable)
		<https://lunatictwo.github.io/2017/09/25/Hbase&&BigTable/>
		<http://blog.csdn.net/baigoohao/article/details/50878645>
		(Bitcask)
		<http://blog.nosqlfan.com/html/955.html>

Stratified Tree:

COLA:
	Implementation:
		(TokuDB)
		<http://blog.sae.sina.com.cn/archives/2932> ?? <http://blog.csdn.net/jwh_bupt/article/details/7901269>
		<https://stackoverflow.com/questions/6079890/cache-oblivious-lookahead-array>

B:
	Implementation:
		(boltDB)
		<https://github.com/qw4990/blog/blob/master/database/boltDB/MODEL.md>
		(sqlite)
		(redbase)
		<https://github.com/junkumar/redbase/blob/master/src/ix_DOC>

Other Tech:
	Bloom filter:
		(is X in Set)
		<http://blog.csdn.net/zdxiq000/article/details/57626464>
	Hash:
		(Redis)
		<http://dongxicheng.org/nosql/redis-code-hashtable/>
		<http://blog.csdn.net/dlf123321/article/details/53365765>
	Hash Tree:
		(Beansdb)
		<http://www.wzxue.com/%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90beansdb/>
	Virtual Machine:
		(sqlite)
		<http://www.sqlite.org/vdbe.html>
	Skip List:
		(levelDB)
	LXU:
		☐	types: LRU(recently), LFU(frequency)
		☐	(LRU) timestamp field + random select N(3-5) then 1
			☐	improvement - idle pool: second selection
		☐	(LRU) classic stack converted to HashMap with LinkedList
		☐	(LRU-K)
		☐	(2Q) FIFO + LRU
		☐	(MQ) Multi LRU + Q-history
		☐	(LFU) Last Decr Time field + Counter field @critical
			☐	detail 1: log increment
	uint8_t LFULogIncr(uint8_t counter) {
      if (counter == 255) return 255;
      double r = (double)rand()/RAND_MAX;
      double baseval = counter - LFU_INIT_VAL;
      if (baseval < 0) baseval = 0;
      double p = 1.0/(baseval*server.lfu_log_factor+1);
      if (r < p) counter++;
      return counter;
  }
  		☐	detail 2: use time field to halve
  	☐	(LXU, for parallel condition) clock pointer
  Buffer Consistence:
  	(for modify)
  	☐	modify database, then delete buffer
  		☐	if(fail 1 and fail sys): file sys
  		☐	if(fail 1): recover buffer
  		☐	if(fail 2): retry or expired buffer
  	☐	delete buffer, then modify database
  		☐	if(before 2, read): sequentialize


cache 4-ry heap
pair heap